<<<<<<< HEAD:RhythmiCal/src/main/resources/Rhythmical_DB_20180426_35_54.txt
﻿-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- SOUNDEFFECT Table Create SQL
CREATE TABLE SOUNDEFFECT
(
    SOUNDEFFECTNUM     INT             NOT NULL, 
    SOUNDEFFECTNAME    VARCHAR2(20)    NOT NULL, 
    CONSTRAINT SOUNDEFFECT_PK PRIMARY KEY (SOUNDEFFECTNUM)
)
/

CREATE SEQUENCE SOUNDEFFECT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER SOUNDEFFECT_SOUNDEFFECT_AI_TRG
BEFORE INSERT ON SOUNDEFFECT 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT SOUNDEFFECT_SEQ.NEXTVAL
    INTO: NEW.SOUNDEFFECTNUM
    FROM DUAL;
END;
/


-- MEMBER Table Create SQL
CREATE TABLE MEMBER
(
    ID          VARCHAR2(20)    NOT NULL, 
    PASSWORD    VARCHAR2(50)    NOT NULL, 
    CLEAR       INT             DEFAULT 0 NOT NULL, 
    isNewbie    INT             DEFAULT 0 NOT NULL, 
    CONSTRAINT MEMBER_PK PRIMARY KEY (ID)
)
/

COMMENT ON COLUMN MEMBER.ID IS 'ID'
/

COMMENT ON COLUMN MEMBER.PASSWORD IS 'PASSWORD'
/

COMMENT ON COLUMN MEMBER.CLEAR IS 'CLEAR'
/


-- DEADSOUND Table Create SQL
CREATE TABLE DEADSOUND
(
    DEADSOUNDNUM     INT             NOT NULL, 
    DEADSOUNDNAME    VARCHAR2(20)    NOT NULL, 
    CONSTRAINT DEADSOUND_PK PRIMARY KEY (DEADSOUNDNUM)
)
/

CREATE SEQUENCE DEADSOUND_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER DEADSOUND_DEADSOUNDNUM_AI_TRG
BEFORE INSERT ON DEADSOUND 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT DEADSOUND_SEQ.NEXTVAL
    INTO: NEW.DEADSOUNDNUM
    FROM DUAL;
END;
/


-- BGM Table Create SQL
CREATE TABLE BGM
(
    BGMNAME    VARCHAR2(20)    NOT NULL, 
    BPM        INT             NOT NULL, 
    CONSTRAINT BGM_PK PRIMARY KEY (BGMNAME)
)
/

COMMENT ON TABLE BGM IS 'MUSIC'
/

COMMENT ON COLUMN BGM.BGMNAME IS 'MUSICNAME'
/

COMMENT ON COLUMN BGM.BPM IS 'BEAT'
/


-- STATE Table Create SQL
CREATE TABLE STATE
(
    STATENUM      INT             NOT NULL, 
    STATENAME     VARCHAR2(20)    NOT NULL, 
    CONTENTNUM    INT             DEFAULT 0 NOT NULL, 
    CONSTRAINT STATE_PK PRIMARY KEY (STATENUM)
)
/

CREATE SEQUENCE STATE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER STATE_STATENUM_AI_TRG
BEFORE INSERT ON STATE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT STATE_SEQ.NEXTVAL
    INTO: NEW.STATENUM
    FROM DUAL;
END;
/


-- BOSS Table Create SQL
CREATE TABLE BOSS
(
    BOSSNAME           VARCHAR2(20)    NOT NULL, 
    HEALTH             VARCHAR2(20)    NOT NULL, 
    SKILL              VARCHAR2(20)    NOT NULL, 
    SKILLPERCENTAGE    INT             NOT NULL, 
    SOUNDEFFECTNUM     INT             NULL, 
    DEADSOUNDNUM       INT             NULL, 
    CONSTRAINT BOSS_PK PRIMARY KEY (BOSSNAME)
)
/

ALTER TABLE BOSS
    ADD CONSTRAINT FK_BOSS_SOUNDEFFECTNUM_SOUNDEF FOREIGN KEY (SOUNDEFFECTNUM)
        REFERENCES SOUNDEFFECT (SOUNDEFFECTNUM)
/

ALTER TABLE BOSS
    ADD CONSTRAINT FK_BOSS_DEADSOUNDNUM_DEADSOUND FOREIGN KEY (DEADSOUNDNUM)
        REFERENCES DEADSOUND (DEADSOUNDNUM)
/


-- STAGE Table Create SQL
CREATE TABLE STAGE
(
    STAGENUM       INT               NOT NULL, 
    BGMNAME        VARCHAR2(20)      NOT NULL, 
    MONSTERLIST    VARCHAR2(1000)    NOT NULL, 
    BGIMGNAME      VARCHAR2(20)      NOT NULL, 
    BOSSNAME       VARCHAR2(20)      NULL, 
    CONSTRAINT STAGE_PK PRIMARY KEY (STAGENUM)
)
/

COMMENT ON TABLE STAGE IS 'STAGE'
/

COMMENT ON COLUMN STAGE.STAGENUM IS 'STAGENUM'
/

COMMENT ON COLUMN STAGE.BGMNAME IS 'MUSICNAME'
/

COMMENT ON COLUMN STAGE.MONSTERLIST IS 'MONSTERLIST'
/

COMMENT ON COLUMN STAGE.BGIMGNAME IS 'IMGNAME'
/

ALTER TABLE STAGE
    ADD CONSTRAINT FK_STAGE_BGMNAME_BGM_BGMNAME FOREIGN KEY (BGMNAME)
        REFERENCES BGM (BGMNAME)
/

ALTER TABLE STAGE
    ADD CONSTRAINT FK_STAGE_BOSSNAME_BOSS_BOSSNAM FOREIGN KEY (BOSSNAME)
        REFERENCES BOSS (BOSSNAME)
/


-- MONSTER Table Create SQL
CREATE TABLE MONSTER
(
    MONSTERNUM         INT             NOT NULL, 
    MONSTERNAME        VARCHAR2(20)    NOT NULL, 
    SPEED              INT             NOT NULL, 
    HEALTH             INT             NOT NULL, 
    SKILL              VARCHAR2(20)    DEFAULT 'jump' NOT NULL, 
    SKILLPERCENTAGE    INT             DEFAULT 0 NOT NULL, 
    SOUNDEFFECTNUM     INT             NULL, 
    DEADSOUNDNUM       INT             NULL, 
    CONSTRAINT MONSTER_PK PRIMARY KEY (MONSTERNUM)
)
/

CREATE SEQUENCE MONSTER_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MONSTER_MONSTERNUM_AI_TRG
BEFORE INSERT ON MONSTER 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MONSTER_SEQ.NEXTVAL
    INTO: NEW.MONSTERNUM
    FROM DUAL;
END;
/

COMMENT ON TABLE MONSTER IS 'MONSTER'
/

COMMENT ON COLUMN MONSTER.MONSTERNAME IS 'MONSTERNAME'
/

COMMENT ON COLUMN MONSTER.SPEED IS 'SPEED'
/

COMMENT ON COLUMN MONSTER.HEALTH IS 'HEALTH'
/

COMMENT ON COLUMN MONSTER.SKILL IS 'SKILL'
/

COMMENT ON COLUMN MONSTER.SOUNDEFFECTNUM IS 'EFFECTSOUNDNAME'
/

ALTER TABLE MONSTER
    ADD CONSTRAINT FK_MONSTER_SOUNDEFFECTNUM_SOUN FOREIGN KEY (SOUNDEFFECTNUM)
        REFERENCES SOUNDEFFECT (SOUNDEFFECTNUM)
/

ALTER TABLE MONSTER
    ADD CONSTRAINT FK_MONSTER_DEADSOUNDNUM_DEADSO FOREIGN KEY (DEADSOUNDNUM)
        REFERENCES DEADSOUND (DEADSOUNDNUM)
/


-- MULTI Table Create SQL
CREATE TABLE MULTI
(
    MULTISLOT      INT             NOT NULL, 
    ID             VARCHAR2(20)    DEFAULT 'NOBODY' NULL, 
    NUMOFPLAYER    INT             DEFAULT 1 NOT NULL, 
    ISUSED         INT             DEFAULT 0 NOT NULL, 
    CONSTRAINT MULTI_PK PRIMARY KEY (MULTISLOT)
)
/

CREATE SEQUENCE MULTI_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MULTI_MULTISLOT_AI_TRG
BEFORE INSERT ON MULTI 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MULTI_SEQ.NEXTVAL
    INTO: NEW.MULTISLOT
    FROM DUAL;
END;
/

COMMENT ON TABLE MULTI IS 'MULTI'
/

COMMENT ON COLUMN MULTI.MULTISLOT IS 'MULTINUM'
/

COMMENT ON COLUMN MULTI.ID IS 'COLOR'
/

ALTER TABLE MULTI
    ADD CONSTRAINT FK_MULTI_ID_MEMBER_ID FOREIGN KEY (ID)
        REFERENCES MEMBER (ID)
/


-- SAVE Table Create SQL
CREATE TABLE SAVE
(
    ID            VARCHAR2(20)      NOT NULL, 
    LIFE          INT               NOT NULL, 
    MOTIONLIST    VARCHAR2(1000)    NOT NULL, 
    STATENUM      INT               NOT NULL, 
    CONSTRAINT SAVE_PK PRIMARY KEY (ID)
)
/

COMMENT ON TABLE SAVE IS 'SAVE'
/

COMMENT ON COLUMN SAVE.ID IS 'ID'
/

COMMENT ON COLUMN SAVE.LIFE IS 'LIFE'
/

COMMENT ON COLUMN SAVE.MOTIONLIST IS 'MOTIONLIST'
/

COMMENT ON COLUMN SAVE.STATENUM IS 'STATE'
/

ALTER TABLE SAVE
    ADD CONSTRAINT FK_SAVE_ID_MEMBER_ID FOREIGN KEY (ID)
        REFERENCES MEMBER (ID)
/

ALTER TABLE SAVE
    ADD CONSTRAINT FK_SAVE_STATENUM_STATE_STATENU FOREIGN KEY (STATENUM)
        REFERENCES STATE (STATENUM)
/


-- HALLOFFAME Table Create SQL
CREATE TABLE HALLOFFAME
(
    ID      VARCHAR2(20)     NOT NULL, 
    TEXT    VARCHAR2(100)    DEFAULT '너무 재밌다~!' NOT NULL, 
    CONSTRAINT HALLOFFAME_PK PRIMARY KEY (ID)
)
/

COMMENT ON TABLE HALLOFFAME IS 'HALLOFFAME'
/

COMMENT ON COLUMN HALLOFFAME.ID IS 'ID'
/

COMMENT ON COLUMN HALLOFFAME.TEXT IS 'TEXT'
/

ALTER TABLE HALLOFFAME
    ADD CONSTRAINT FK_HALLOFFAME_ID_MEMBER_ID FOREIGN KEY (ID)
        REFERENCES MEMBER (ID)
/


-- MOTION Table Create SQL
CREATE TABLE MOTION
(
    KINDS             INT             NOT NULL, 
    EFFECT            VARCHAR2(20)    NOT NULL, 
    SOUNDEFFECTNUM    INT             NOT NULL, 
    CONSTRAINT MOTION_PK PRIMARY KEY (KINDS)
)
/

CREATE SEQUENCE MOTION_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MOTION_KINDS_AI_TRG
BEFORE INSERT ON MOTION 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MOTION_SEQ.NEXTVAL
    INTO: NEW.KINDS
    FROM DUAL;
END;
/

COMMENT ON TABLE MOTION IS 'MOTION'
/

COMMENT ON COLUMN MOTION.KINDS IS 'KINDS'
/

COMMENT ON COLUMN MOTION.EFFECT IS 'EFFECT'
/

COMMENT ON COLUMN MOTION.SOUNDEFFECTNUM IS 'EFFECTSOUNDNAME'
/

ALTER TABLE MOTION
    ADD CONSTRAINT FK_MOTION_SOUNDEFFECTNUM_SOUND FOREIGN KEY (SOUNDEFFECTNUM)
        REFERENCES SOUNDEFFECT (SOUNDEFFECTNUM)
/


-- STORY Table Create SQL
CREATE TABLE STORY
(
    CONTENTORDER      INT               NOT NULL, 
    STORYNUM          INT               NOT NULL, 
    CONTENT           VARCHAR2(1000)    NOT NULL, 
    IMGNAME           VARCHAR2(20)      NOT NULL, 
    MUSICNAME         VARCHAR2(20)      NOT NULL, 
    CHARACTERNAME     VARCHAR2(20)      NOT NULL, 
    SOUNDEFFECTNUM    INT               NULL, 
    CONSTRAINT STORY_PK PRIMARY KEY (CONTENTORDER)
)
/

CREATE SEQUENCE STORY_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER STORY_CONTENTORDER_AI_TRG
BEFORE INSERT ON STORY 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT STORY_SEQ.NEXTVAL
    INTO: NEW.CONTENTORDER
    FROM DUAL;
END;
/

COMMENT ON TABLE STORY IS 'CONTENT'
/

COMMENT ON COLUMN STORY.CONTENTORDER IS 'CONTENTORDER'
/

COMMENT ON COLUMN STORY.STORYNUM IS 'STORYNUM'
/

COMMENT ON COLUMN STORY.CONTENT IS 'CONTENT'
/

COMMENT ON COLUMN STORY.CHARACTERNAME IS 'CHARACTERNAME'
/

ALTER TABLE STORY
    ADD CONSTRAINT FK_STORY_SOUNDEFFECTNUM_SOUNDE FOREIGN KEY (SOUNDEFFECTNUM)
        REFERENCES SOUNDEFFECT (SOUNDEFFECTNUM)
/


=======
﻿-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- SOUNDEFFECT Table Create SQL
CREATE TABLE SOUNDEFFECT
(
    SOUNDEFFECTNUM     INT             NOT NULL, 
    SOUNDEFFECTNAME    VARCHAR2(20)    NOT NULL, 
    CONSTRAINT SOUNDEFFECT_PK PRIMARY KEY (SOUNDEFFECTNUM)
)
/

CREATE SEQUENCE SOUNDEFFECT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER SOUNDEFFECT_SOUNDEFFECT_AI_TRG
BEFORE INSERT ON SOUNDEFFECT 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT SOUNDEFFECT_SEQ.NEXTVAL
    INTO: NEW.SOUNDEFFECTNUM
    FROM DUAL;
END;
/


-- MEMBER Table Create SQL
CREATE TABLE MEMBER
(
    ID          VARCHAR2(20)    NOT NULL, 
    PASSWORD    VARCHAR2(50)    NOT NULL, 
    CLEAR       INT             DEFAULT 0 NOT NULL, 
    isNewbie    INT             DEFAULT 0 NOT NULL, 
    CONSTRAINT MEMBER_PK PRIMARY KEY (ID)
)
/

COMMENT ON COLUMN MEMBER.ID IS 'ID'
/

COMMENT ON COLUMN MEMBER.PASSWORD IS 'PASSWORD'
/

COMMENT ON COLUMN MEMBER.CLEAR IS 'CLEAR'
/


-- DEADSOUND Table Create SQL
CREATE TABLE DEADSOUND
(
    DEADSOUNDNUM     INT             NOT NULL, 
    DEADSOUNDNAME    VARCHAR2(20)    NOT NULL, 
    CONSTRAINT DEADSOUND_PK PRIMARY KEY (DEADSOUNDNUM)
)
/

CREATE SEQUENCE DEADSOUND_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER DEADSOUND_DEADSOUNDNUM_AI_TRG
BEFORE INSERT ON DEADSOUND 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT DEADSOUND_SEQ.NEXTVAL
    INTO: NEW.DEADSOUNDNUM
    FROM DUAL;
END;
/


-- BGM Table Create SQL
CREATE TABLE BGM
(
    BGMNAME    VARCHAR2(20)    NOT NULL, 
    BPM        INT             NOT NULL, 
    CONSTRAINT BGM_PK PRIMARY KEY (BGMNAME)
)
/

COMMENT ON TABLE BGM IS 'MUSIC'
/

COMMENT ON COLUMN BGM.BGMNAME IS 'MUSICNAME'
/

COMMENT ON COLUMN BGM.BPM IS 'BEAT'
/


-- STATE Table Create SQL
CREATE TABLE STATE
(
    STATENUM     INT             NOT NULL, 
    STATENAME    VARCHAR2(20)    NOT NULL, 
    CONSTRAINT STATE_PK PRIMARY KEY (STATENUM)
)
/


-- BOSS Table Create SQL
CREATE TABLE BOSS
(
    BOSSNAME           VARCHAR2(20)    NOT NULL, 
    HEALTH             VARCHAR2(20)    NOT NULL, 
    SKILL              VARCHAR2(20)    NOT NULL, 
    SKILLPERCENTAGE    INT             NOT NULL, 
    SOUNDEFFECTNUM     INT             NULL, 
    DEADSOUNDNUM       INT             NULL, 
    CONSTRAINT BOSS_PK PRIMARY KEY (BOSSNAME)
)
/

ALTER TABLE BOSS
    ADD CONSTRAINT FK_BOSS_SOUNDEFFECTNUM_SOUNDEF FOREIGN KEY (SOUNDEFFECTNUM)
        REFERENCES SOUNDEFFECT (SOUNDEFFECTNUM)
/

ALTER TABLE BOSS
    ADD CONSTRAINT FK_BOSS_DEADSOUNDNUM_DEADSOUND FOREIGN KEY (DEADSOUNDNUM)
        REFERENCES DEADSOUND (DEADSOUNDNUM)
/


-- STAGE Table Create SQL
CREATE TABLE STAGE
(
    STAGENUM       INT               NOT NULL, 
    BGMNAME        VARCHAR2(20)      NOT NULL, 
    MONSTERLIST    VARCHAR2(1000)    NOT NULL, 
    BGIMGNAME      VARCHAR2(20)      NOT NULL, 
    BOSSNAME       VARCHAR2(20)      NULL, 
    CONSTRAINT STAGE_PK PRIMARY KEY (STAGENUM)
)
/

COMMENT ON TABLE STAGE IS 'STAGE'
/

COMMENT ON COLUMN STAGE.STAGENUM IS 'STAGENUM'
/

COMMENT ON COLUMN STAGE.BGMNAME IS 'MUSICNAME'
/

COMMENT ON COLUMN STAGE.MONSTERLIST IS 'MONSTERLIST'
/

COMMENT ON COLUMN STAGE.BGIMGNAME IS 'IMGNAME'
/

ALTER TABLE STAGE
    ADD CONSTRAINT FK_STAGE_BGMNAME_BGM_BGMNAME FOREIGN KEY (BGMNAME)
        REFERENCES BGM (BGMNAME)
/

ALTER TABLE STAGE
    ADD CONSTRAINT FK_STAGE_BOSSNAME_BOSS_BOSSNAM FOREIGN KEY (BOSSNAME)
        REFERENCES BOSS (BOSSNAME)
/


-- MONSTER Table Create SQL
CREATE TABLE MONSTER
(
    MONSTERNUM         INT             NOT NULL, 
    MONSTERNAME        VARCHAR2(20)    NOT NULL, 
    SPEED              INT             NOT NULL, 
    HEALTH             INT             NOT NULL, 
    SKILL              VARCHAR2(20)    DEFAULT 'jump' NOT NULL, 
    SKILLPERCENTAGE    INT             DEFAULT 0 NOT NULL, 
    SOUNDEFFECTNUM     INT             NULL, 
    DEADSOUNDNUM       INT             NULL, 
    CONSTRAINT MONSTER_PK PRIMARY KEY (MONSTERNUM)
)
/

CREATE SEQUENCE MONSTER_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MONSTER_MONSTERNUM_AI_TRG
BEFORE INSERT ON MONSTER 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MONSTER_SEQ.NEXTVAL
    INTO: NEW.MONSTERNUM
    FROM DUAL;
END;
/

COMMENT ON TABLE MONSTER IS 'MONSTER'
/

COMMENT ON COLUMN MONSTER.MONSTERNAME IS 'MONSTERNAME'
/

COMMENT ON COLUMN MONSTER.SPEED IS 'SPEED'
/

COMMENT ON COLUMN MONSTER.HEALTH IS 'HEALTH'
/

COMMENT ON COLUMN MONSTER.SKILL IS 'SKILL'
/

COMMENT ON COLUMN MONSTER.SOUNDEFFECTNUM IS 'EFFECTSOUNDNAME'
/

ALTER TABLE MONSTER
    ADD CONSTRAINT FK_MONSTER_SOUNDEFFECTNUM_SOUN FOREIGN KEY (SOUNDEFFECTNUM)
        REFERENCES SOUNDEFFECT (SOUNDEFFECTNUM)
/

ALTER TABLE MONSTER
    ADD CONSTRAINT FK_MONSTER_DEADSOUNDNUM_DEADSO FOREIGN KEY (DEADSOUNDNUM)
        REFERENCES DEADSOUND (DEADSOUNDNUM)
/


-- MULTI Table Create SQL
CREATE TABLE MULTI
(
    MULTISLOT      INT             NOT NULL, 
    ID             VARCHAR2(20)    DEFAULT 'NOBODY' NULL, 
    NUMOFPLAYER    INT             DEFAULT 1 NOT NULL, 
    ISUSED         INT             DEFAULT 0 NOT NULL, 
    CONSTRAINT MULTI_PK PRIMARY KEY (MULTISLOT)
)
/

CREATE SEQUENCE MULTI_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MULTI_MULTISLOT_AI_TRG
BEFORE INSERT ON MULTI 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MULTI_SEQ.NEXTVAL
    INTO: NEW.MULTISLOT
    FROM DUAL;
END;
/

COMMENT ON TABLE MULTI IS 'MULTI'
/

COMMENT ON COLUMN MULTI.MULTISLOT IS 'MULTINUM'
/

COMMENT ON COLUMN MULTI.ID IS 'COLOR'
/

ALTER TABLE MULTI
    ADD CONSTRAINT FK_MULTI_ID_MEMBER_ID FOREIGN KEY (ID)
        REFERENCES MEMBER (ID)
/


-- SAVE Table Create SQL
CREATE TABLE SAVE
(
    ID            VARCHAR2(20)      NOT NULL, 
    LIFE          INT               NOT NULL, 
    MOTIONLIST    VARCHAR2(1000)    NOT NULL, 
    STATENUM      INT               NOT NULL, 
    CONSTRAINT SAVE_PK PRIMARY KEY (ID)
)
/

COMMENT ON TABLE SAVE IS 'SAVE'
/

COMMENT ON COLUMN SAVE.ID IS 'ID'
/

COMMENT ON COLUMN SAVE.LIFE IS 'LIFE'
/

COMMENT ON COLUMN SAVE.MOTIONLIST IS 'MOTIONLIST'
/

COMMENT ON COLUMN SAVE.STATENUM IS 'STATE'
/

ALTER TABLE SAVE
    ADD CONSTRAINT FK_SAVE_ID_MEMBER_ID FOREIGN KEY (ID)
        REFERENCES MEMBER (ID)
/

ALTER TABLE SAVE
    ADD CONSTRAINT FK_SAVE_STATENUM_STATE_STATENU FOREIGN KEY (STATENUM)
        REFERENCES STATE (STATENUM)
/


-- HALLOFFAME Table Create SQL
CREATE TABLE HALLOFFAME
(
    ID      VARCHAR2(20)     NOT NULL, 
    TEXT    VARCHAR2(100)    DEFAULT '너무 재밌다~!' NOT NULL, 
    CONSTRAINT HALLOFFAME_PK PRIMARY KEY (ID)
)
/

COMMENT ON TABLE HALLOFFAME IS 'HALLOFFAME'
/

COMMENT ON COLUMN HALLOFFAME.ID IS 'ID'
/

COMMENT ON COLUMN HALLOFFAME.TEXT IS 'TEXT'
/

ALTER TABLE HALLOFFAME
    ADD CONSTRAINT FK_HALLOFFAME_ID_MEMBER_ID FOREIGN KEY (ID)
        REFERENCES MEMBER (ID)
/


-- MOTION Table Create SQL
CREATE TABLE MOTION
(
    KINDS             INT             NOT NULL, 
    EFFECT            VARCHAR2(20)    NOT NULL, 
    SOUNDEFFECTNUM    INT             NOT NULL, 
    CONSTRAINT MOTION_PK PRIMARY KEY (KINDS)
)
/

CREATE SEQUENCE MOTION_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MOTION_KINDS_AI_TRG
BEFORE INSERT ON MOTION 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MOTION_SEQ.NEXTVAL
    INTO: NEW.KINDS
    FROM DUAL;
END;
/

COMMENT ON TABLE MOTION IS 'MOTION'
/

COMMENT ON COLUMN MOTION.KINDS IS 'KINDS'
/

COMMENT ON COLUMN MOTION.EFFECT IS 'EFFECT'
/

COMMENT ON COLUMN MOTION.SOUNDEFFECTNUM IS 'EFFECTSOUNDNAME'
/

ALTER TABLE MOTION
    ADD CONSTRAINT FK_MOTION_SOUNDEFFECTNUM_SOUND FOREIGN KEY (SOUNDEFFECTNUM)
        REFERENCES SOUNDEFFECT (SOUNDEFFECTNUM)
/


-- STORY Table Create SQL
CREATE TABLE STORY
(
    CONTENTORDER      INT               NOT NULL, 
    STORYNUM          INT               NOT NULL, 
    CONTENT           VARCHAR2(1000)    NOT NULL, 
    IMGNAME           VARCHAR2(20)      NOT NULL, 
    MUSICNAME         VARCHAR2(20)      NOT NULL, 
    CHARACTERNAME     VARCHAR2(20)      NOT NULL, 
    SOUNDEFFECTNUM    INT               NULL, 
    CONSTRAINT STORY_PK PRIMARY KEY (CONTENTORDER)
)
/

CREATE SEQUENCE STORY_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER STORY_CONTENTORDER_AI_TRG
BEFORE INSERT ON STORY 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT STORY_SEQ.NEXTVAL
    INTO: NEW.CONTENTORDER
    FROM DUAL;
END;
/

COMMENT ON TABLE STORY IS 'CONTENT'
/

COMMENT ON COLUMN STORY.CONTENTORDER IS 'CONTENTORDER'
/

COMMENT ON COLUMN STORY.STORYNUM IS 'STORYNUM'
/

COMMENT ON COLUMN STORY.CONTENT IS 'CONTENT'
/

COMMENT ON COLUMN STORY.CHARACTERNAME IS 'CHARACTERNAME'
/

ALTER TABLE STORY
    ADD CONSTRAINT FK_STORY_SOUNDEFFECTNUM_SOUNDE FOREIGN KEY (SOUNDEFFECTNUM)
        REFERENCES SOUNDEFFECT (SOUNDEFFECTNUM)
/


>>>>>>> d5f49342fe805828195a6a0669b25bc811fcb3ae:RhythmiCal/src/main/resources/Rhythmical_DB.txt
